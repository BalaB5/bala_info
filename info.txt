
# region Add new api function by Bala

@api_view(['GET'])
def get_inventory_purchase_list(request, farmer_id, inventory_type_id, inventory_items_id):
    farmer = get_object_or_404(Farmer, id=farmer_id)
    inventory_type = get_object_or_404(InventoryType, id=inventory_type_id)
    inventory_items = get_object_or_404(InventoryItems, id=inventory_items_id)

    inventories_qs = MyInventory.objects.filter(
        farmer=farmer,
        inventory_type=inventory_type,
        inventory_items=inventory_items,
    )

    # mapping: type -> (field, has_quantity, unit_type)
    inventory_map = {
        6: ("fuel_purchase", True, "liter"),      # Fuel → has quantity
        2: ("machinery_purchase", False, ""),     # Machinery → no quantity
        1: ("vehicle_purchase", False, ""),       # Vehicle → no quantity
    }

    if inventory_type.id not in inventory_map:
        return Response([], status=status.HTTP_200_OK)

    field, has_quantity, unit_type = inventory_map[inventory_type.id]

    fields_to_fetch = [
        f"{field}__id",
        f"{field}__date_of_consumption",
        f"{field}__purchase_amount",
        f"{field}__vendor__id",
        f"{field}__vendor__name",
    ]
    if has_quantity:
        fields_to_fetch.append(f"{field}__quantity")

    data = inventories_qs.values(*fields_to_fetch)

    paginator = PageNumberPagination()
    paginator.page_size = 10

    try:
        paginated_data = paginator.paginate_queryset(list(data), request)
    except NotFound:
        return Response({
            "error": "No more items.",
            "message": "You have reached the end of the list."
        }, status=status.HTTP_400_BAD_REQUEST)

    def format_item(item):
        result = {
            'id': item.get(f"{field}__id"),
            'date_of_consumption': str(item.get(f"{field}__date_of_consumption") or "N/A"),
            'purchase_amount': str(item.get(f"{field}__purchase_amount") or "0.00"),
            'vendor': {
                'id': item.get(f"{field}__vendor__id"),
                'name': item.get(f"{field}__vendor__name") or "Unknown",
            }
        }
        if has_quantity:  # only fuel
            result['quantity'] = str(item.get(f"{field}__quantity") or "0.00")
            result['unit_type'] = unit_type
        return result

    response_data = list(map(format_item, paginated_data))
    return Response(response_data, status=status.HTTP_200_OK)


@api_view(['GET'])
def get_inventory_cusumption_list(request, farmer_id, inventory_type_id, inventory_items_id): 
    farmer = get_object_or_404(Farmer, id=farmer_id)
    inventory_type = get_object_or_404(InventoryType, id=inventory_type_id)
    inventory_items = get_object_or_404(InventoryItems, id=inventory_items_id)

    inventories = MyInventory.objects.filter(
        farmer=farmer, 
        inventory_type=inventory_type, 
        inventory_items=inventory_items
    ).select_related('crop', 'crop__crop')  

    paginator = PageNumberPagination()
    paginator.page_size = 2

    try:
        paginated_inventories = paginator.paginate_queryset(list(inventories), request)
    except NotFound:
        return Response(
            {
                "error": "No more items.",
                "message": "You have reached the end of the list."
            },
            status=status.HTTP_400_BAD_REQUEST
        )
    response_data = list(
        map(lambda inventory: {
        'id': inventory.id,
        'quantity': str(inventory.quantity_utilized) if inventory.quantity_utilized else "0.00",
        'date_of_consumption': str(inventory.date_of_consumption) if inventory.date_of_consumption else "N/A",
        'start_kilometer': str(inventory.start_kilometer) if inventory.start_kilometer else "0.00",
        'end_kilometer': str(inventory.end_kilometer) if inventory.end_kilometer else "0.00",
        'usage_hours': str(inventory.usage_hours) if inventory.usage_hours else "0.00",
        'rental': str(inventory.rental) if inventory.rental else "1",
        'crop_id': inventory.crop.id if inventory.crop else None,
        'crop_name': inventory.crop.crop.get_translated_value("name", language_code) if inventory.crop else "Unknown Crop",
        'created_at': str(inventory.created_at) if inventory.created_at else "N/A",
        'updated_at': str(inventory.updated_at) if inventory.updated_at else "N/A",
    }, paginated_inventories))

    return Response(response_data, status=status.HTTP_200_OK)

# endregion
